% Оголошення фактів
:- discontiguous is_a/2.
:- discontiguous part_of/2.
:- discontiguous causes/2. % новий тип зв'язку
:- discontiguous has_property/2. % новий тип зв'язку

% Факти про страви
dish(яєшня, сніданок, солоне, 15).
dish(яєшня_з_помідорами, сніданок, солоне, 15).
dish(яйця_по_іспанськи, сніданок, солодке, 30).
dish(яблучний_пиріг, вечеря, солодке, 60).
dish(яловичий_бургер, вечеря, солоне, 60).
dish(яблучний_кекс, сніданок, солодке, 45).
dish(яблучний_мус, десерт, солодке, 45).
dish(яблучна_запіканка, вечеря, солодке, 60).
dish(якіті_карі, вечеря, гостре, 30).
dish(японська_каша, сніданок, солодке, 20).
dish(ячмінний_суп, обід, солоне, 45).
dish(яблучний_торт, десерт, солодке, 60).
dish(яловичий_стейк, вечеря, солоне, 40).
dish(яблучний_джем, сніданок, солодке, 30).
dish(овочевий_суп, обід, солоне, 30).
dish(курячий_бургери, вечеря, солоне, 45).
dish(салат_цезар, обід, солоне, 20).
dish(паста_альфредо, вечеря, солодке, 50).
dish(фруктовий_салат, десерт, солодке, 20).
dish(млинці, сніданок, солодке, 15).
dish(шоколадний_торт, десерт, солодке, 70).
dish(плов, вечеря, солоне, 60).
dish(суп_пюре, обід, солоне, 40).
dish(пиріжки, сніданок, солодке, 30).
dish(омлет, сніданок, солоне, 20).
dish(тости, сніданок, солоне, 10).
dish(гречка, обід, солоне, 30).
dish(рибний_суп, обід, солоне, 40).
dish(фрикадельки, вечеря, солоне, 50).
dish(пиріг_з_вишнями, десерт, солодке, 45).
dish(чізкейк, десерт, солодке, 60).

% Правила для ідентифікації блюд
satisfies_criteria(Dish, Type, Taste, CookingTime) :- 
    dish(Dish, Type, Taste, CookingTime).

% Запит користувача та пошук блюд
ask_user :-
    repeat, % Дозволяє повторювати запит
    write("Чи хочете ви отримати список страв? (так/ні): "), read(Answer),
    (Answer = так -> 
        list_all_dishes;
        (Answer = ні -> write("Дякуємо за використання програми!"), nl, ! ; write("Невірний ввод, спробуйте ще раз."), nl)),
    write("Чи хочете ви зробити запит на конкретну страву? (так/ні): "), read(QueryAnswer),
    (QueryAnswer = так -> query_dish; true).

query_dish :-
    write("Яке блюдо ви бажаєте? (сніданок, обід, вечеря): "), read(Type),
    write("Який смак ви б хотіли? (солодке, солоне, гостре, кисле): "), read(Taste),
    write("Який час приготування ви бажаєте? (15, 30, 60, 120): "), read(CookingTime),
    findall(Dish, satisfies_criteria(Dish, Type, Taste, CookingTime), Dishes),
    (Dishes = [] -> write("На жаль, не знайдено блюд, що відповідають заданим критеріям.");
    write("Рекомендовані блюда: "), write(Dishes)), nl.

list_all_dishes :-
    write("Список усіх страв:"), nl,
    findall(Dish, dish(Dish, сніданок, _, _), BreakfastDishes),
    findall(Dish, dish(Dish, обід, _, _), LunchDishes),
    findall(Dish, dish(Dish, вечеря, _, _), DinnerDishes),
    write("Сніданок: "), write(BreakfastDishes), nl,
    write("Обід: "), write(LunchDishes), nl,
    write("Вечеря: "), write(DinnerDishes), nl.

% Правила для онтології
is_a(блюдо, їжа).
is_a(сніданок, тип_страви).
is_a(обід, тип_страви).
is_a(вечеря, тип_страви).
is_a(десерт, тип_страви).

% Мульти-наслідування
is_a(шоколадний_торт, десерт).
is_a(шоколадний_торт, блюдо).

part_of(яєшня, сніданок).
part_of(яєшня_з_помідорами, сніданок).
part_of(яйця_по_іспанськи, сніданок).
part_of(яблучний_пиріг, вечеря).
part_of(яловичий_бургер, вечеря).
part_of(яблучний_кекс, сніданок).
part_of(яблучний_мус, десерт).
part_of(яблучна_запіканка, вечеря).
part_of(якіті_карі, вечеря).
part_of(японська_каша, сніданок).
part_of(ячмінний_суп, обід).
part_of(яблучний_торт, десерт).
part_of(яловичий_стейк, вечеря).
part_of(яблучний_джем, сніданок).
part_of(овочевий_суп, обід).
part_of(курячий_бургери, вечеря).
part_of(салат_цезар, обід).
part_of(паста_альфредо, вечеря).
part_of(фруктовий_салат, десерт).
part_of(млинці, сніданок).
part_of(шоколадний_торт, десерт).
part_of(плов, вечеря).
part_of(суп_пюре, обід).

% Нові зв'язки
causes(сніданок, енергія).
has_property(яєшня, популярна).

% Заборона наслідування
% Забороняємо наслідування властивостей десертів
part_of(X, десерт) :- \+ is_a(X, десерт).

% Потенційно нескінченне виведення
infinite_proof :- 
    write("Це приклад потенційно нескінченного виведення."),
    nl,
    fail.

% Запуск програми
:- initialization(ask_user).
